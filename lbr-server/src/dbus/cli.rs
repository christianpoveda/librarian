// This code was autogenerated with `dbus-codegen-rust --methodaccess AsRefClosure`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::tree;

pub trait LbrCli {
    fn insert(&self, doc: &str, path: &str) -> Result<(), tree::MethodErr>;
}

pub fn lbr_cli_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: AsRef<dyn LbrCli>,
    F: 'static + Fn(&tree::MethodInfo<tree::MTFn<D>, D>) -> T,
{
    let i = factory.interface("lbr.cli", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let doc: &str = i.read()?;
        let path: &str = i.read()?;
        let dd = fclone(minfo);
        let d = dd.as_ref();
        d.insert(doc, path)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("Insert", Default::default(), h);
    let m = m.in_arg(("doc", "s"));
    let m = m.in_arg(("path", "s"));
    let i = i.add_m(m);
    i
}
